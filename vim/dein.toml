# ------------------------------------------------------------------------------
# ~/dotfiles/vim/dein.toml
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_post_update = '''
    execute 'helptags '
        \ . g:dein_dir . expand('/repos/github.com/vim-jp/vimdoc-ja/doc')
'''
hook_add = '''
    if &runtimepath !~# expand('/vimdoc-ja')
        execute 'set runtimepath+='
            \ . g:dein_dir . expand('/repos/github.com/vim-jp/vimdoc-ja')
    endif
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
# hook_post_update = '''
#     if dein#util#_is_windows()
#         let s:cmd = 'tools\\update-dll-mingw'
#     elseif dein#util#_is_cygwin()
#         let s:cmd = 'make -f make_cygwin.mak'
#     elseif executable('gmake')
#         let s:cmd = 'gmake'
#     else
#         let s:cmd = 'make'
#     endif
#     let g:dein#plugin.build = s:cmd
# '''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
if = "!(has('python3') && (has('nvim') || v:version >= 800))"
depends = 'neomru.vim'
hook_add = '''
    nnoremap [Unite] <Nop>
    nmap <Space>u [Unite]
    nnoremap <silent> [Unite]f :<C-U>Unite file_rec<CR>
    nnoremap <silent> [Unite]m :<C-U>Unite file_mru<CR>
    nnoremap <silent> [Unite]b :<C-U>UniteWithBufferDir file_rec<CR>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('python3') && (has('nvim') || v:version >= 800)"
depends = 'neomru.vim'
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
hook_add = '''
    nnoremap [Denite] <Nop>
    nmap <Space>u [Denite]
    nnoremap <silent> [Denite]f :<C-U>Denite file_rec<CR>
    nnoremap <silent> [Denite]m :<C-U>Denite file_mru -mode=normal<CR>
    nnoremap <silent> [Denite]b :<C-U>DeniteBufferDir file_rec<CR>
'''
hook_post_source = '''
    call denite#custom#source('file_rec', 'matchers', ['matcher_regexp'])
    call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "!(has('nvim') && has('python3')) && (v:version + has('patch885') >= 704 || has('nvim')) && has('lua')"
on_i = 1
hook_add = '''
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0

    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1

    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1

    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default'  : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme'   : $HOME.'/.gosh_completions'
            \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr> <C-g> neocomplete#undo_completion()
    inoremap <expr> <C-l> neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>

    function! s:my_cr_function()
      return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
      " For no inserting <CR> key.
      " return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction

    " <TAB>: completion.
    inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr> <C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr> <BS>  neocomplete#smart_close_popup()."\<C-h>"

    " Close popup by <Space>.
    " inoremap <expr> <Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    " let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    " set completeopt+=longest
    " let g:neocomplete#enable_auto_select = 1
    " let g:neocomplete#disable_auto_complete = 1
    " inoremap <expr> <TAB> pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    augroup neocomplete
        autocmd!
        autocmd FileType css    setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown
                              \ setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript
                              \ setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml    setlocal omnifunc=xmlcomplete#CompleteTags
    augroup END

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    " let g:neocomplete#sources#omni#input_patterns.php
    "                                \ = '[^. \t]->\h\w*\|\h\w*::'
    " let g:neocomplete#sources#omni#input_patterns.c
    "                                \ = '[^.[:digit:] *\t]\%(\.\|->\)'
    " let g:neocomplete#sources#omni#input_patterns.cpp
    "                                \ = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    " Don't display preview window.
    set completeopt-=preview
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim') && has('python3')"
on_i = 1
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_refresh_always = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet'
if = "has('nvim') || v:version >= 704"
on_source = ['neocomplete.vim', 'deoplete.nvim']
hook_add = '''
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " SuperTab like snippets behavior.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    "imap <expr><TAB>
    " \ pumvisible() ? "\<C-n>" :
    " \ neosnippet#expandable_or_jumpable() ?
    " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
if = "has('nvim') || v:version >= 704"
on_source = 'neosnippet'
# on_i = 1
hook_add = '''
    let g:neosnippet#snippets_directory = g:dein_dir
        \ . expand('/repos/github.com/Shougo/neosnippet-snippets/snippets/')
'''

[[plugins]]
repo = 'ujihisa/neco-look'
if = "executable('look')"

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vimproc.vim'
hook_add = '''
    let g:quickrun_no_default_key_mappings = 1

    augroup quickrun
        autocmd!
        autocmd BufRead,BufNewFile * let b:quickrun_args = ''
    augroup END

    nnoremap <silent> <Space>q :<C-U>call <SID>my_quickrun()<CR>

    function! s:my_quickrun()
        let l:tempbelow = &splitbelow
        let l:tempright = &splitright
        set splitbelow
        set splitright
        call quickrun#run('-args ' . b:quickrun_args)
        let &splitbelow = l:tempbelow
        let &splitright = l:tempright
    endfunction

    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    if has('win32unix')
        let g:quickrun_config['java'] = {
        \   'exec': ['javac -J-Dfile.encoding=UTF-8 %o `cygpath -wp %s`',
        \            '%c -Dfile.encoding=UTF-8 `cygpath -wp %s:t:r` %a']
        \}
    endif

    let g:quickrun_config['markdown'] = {
    \   'outputter' : 'browser'
    \}
'''
 
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
depends = 'vim-quickrun'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['vimproc.vim', 'vim-quickrun', 'shabadou']
hook_add = '''
    " Check syntax after save the file.
    let g:watchdogs_check_BufWritePost_enable = 1

    nnoremap <Space>w :<C-U>WatchdogsRun<CR>

    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    let g:quickrun_config['watchdogs_checker/_'] = {
    \   'hook/close_quickfix/enable_exit': 1
    \}

    let g:quickrun_config['java/watchdogs_checker'] = {
    \   'type': 'watchdogs_checker/javac'
    \}

    let g:quickrun_config['watchdogs_checker/javac'] = {
    \   'command': 'javac',
    \   'exec': '%c %o %S',
    \   'errorformat': '%A%f:%l: %m,%-Z%p^,%+C%.%#,%-G%.%#'
    \}

    let g:quickrun_config['watchdogs_checker/pyflakes3'] = {
    \   'command': executable('pyflakes3') ? 'pyflakes3' :
    \              executable('python3')   ? 'python3'   :
    \              executable('pyflakes')  ? 'pyflakes'  :
    \                                        'python'    ,
    \   'cmdopt': executable('pyflakes3') ? ''            :
    \             executable('python3')   ? '-m pyflakes' :
    \             executable('pyflakes')  ? ''            :
    \                                       '-m pyflakes' ,
    \   'exec': '%c %o %s:p',
    \   'errorformat': '%f:%l:%m'
    \}
'''
 
[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = '0x841/yozakura.vim'
hook_source = '''
    colorscheme yozakura
'''

[[plugins]]
repo = '0x841/stare-tab.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_source = '''
    let g:indentLine_fileTypeExclude = ['help', 'quickrun', 'text', 'w3m']
    let g:indentLine_color_term = 236
    let g:indentLine_char = '|'
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<plug>(incsearch-']
hook_add = '''
    let g:incsearch#auto_nohlsearch = 1
    map / <plug>(incsearch-forward)
    map ? <plug>(incsearch-backward)
    map * <plug>(incsearch-nohl-*)
    map # <plug>(incsearch-nohl-#)
    map n <plug>(incsearch-nohl-n)
    map N <plug>(incsearch-nohl-N)
    noremap <Space>/ /
    noremap <Space>* *
'''

# [[plugins]]
# repo = 'easymotion/vim-easymotion'
# on_map = ['<plug>(easymotion-']
# hook_add = '''
#     let g:EasyMotion_do_mapping       = 0
#     let g:EasyMotion_enter_jump_first = 1
#     let g:EasyMotion_smartcase        = 1
#     " let g:EasyMotion_use_migemo       = 1
# 
#     nmap <Space>f <plug>(easymotion-s2)
# '''

[[plugins]]
repo = 'thinca/vim-ref'
if = "executable('w3m') || executable('lynx')"
on_cmd = 'Ref'
hook_add = '''
    let g:ref_source_webdict_cmd =
    \   executable('w3m')  ? 'w3m -dump %s' :
    \   executable('lynx') ? 'lynx -dump -nonumbers %s' :
    \                        ''

    let g:ref_source_webdict_sites = {
    \   'alc' : {
    \       'url' : 'http://eow.alc.co.jp/search?q=%s'
    \    },
    \   'wiki' : {
    \       'url' : 'http://ja.wikipedia.org/w/index.php?search=%s'
    \   }
    \}

    let g:ref_source_webdict_sites.default = 'alc'

    function! g:ref_source_webdict_sites.alc.filter(output)
        return s:remove_lines(a:output, 24)
    endfunction
    function! g:ref_source_webdict_sites.wiki.filter(output)
        return s:remove_lines(a:output, 2)
    endfunction
    function! s:remove_lines(output, head_lines)
        let l:removeCR = a:output
        let l:removeCR = substitute(l:removeCR, '\n\{3,}',   '\n\n',     'g')
        return join(split(l:removeCR, "\n")[a:head_lines:], "\n")
    endfunction

    nnoremap [Ref] <Nop>
    nmap <Space>r [Ref]
    nnoremap [Ref]a :<C-U>Ref webdict alc<Space>
    nnoremap [Ref]w :<C-U>Ref webdict wiki<Space>
'''

[[plugins]]
repo = 'yuratomo/w3m.vim'
if = "executable('w3m')"
on_cmd = ['W3m',      'W3mHistory', 'W3mHistoryClear', 'W3mLocal',
          'W3mSplit', 'W3mTab',     'W3mVSplit']
hook_add = '''
    nnoremap <expr> <Space>b expand('%') == '' ? ':W3m ' : ':W3mTab '
'''

[[plugins]]
repo = 'thinca/vim-singleton'
if = "has('gui_running')"
hook_source = '''
    call singleton#enable()
'''

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
if =  "(has('nvim') || v:version >= 704) && has('python') && !has('win32unix')"
on_ft = 'java'
hook_add = '''
    augroup javacomplete2
        autocmd!
        autocmd FileType java setlocal omnifunc=javacomplete#Complete
    augroup END
'''

