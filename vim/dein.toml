# ------------------------------------------------------------------------------
# dotfiles/vim/dein.toml
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# General plugins
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'
if = 'g:Version_check(704)'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_post_update = '''
    let s:doc_dir = g:plugins_dir . expand('/repos/github.com/vim-jp/vimdoc-ja/doc')
    execute 'helptags ' . s:doc_dir
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
if = "g:Version_check(702) && !(g:is_windows && has('kaoriya')) && has('reltime')"
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'
if = "!(g:Version_check(800) && has('python3'))"
depends = 'neomru.vim'
on_cmd = ['Unite', 'UniteBookmarkAdd', 'UniteClose', 'UniteDo', 'UniteFirst', 'UniteLast',
    'UniteNext', 'UnitePrevious', 'UniteResume', 'UniteWithBufferDir', 'UniteWithCurrentDir',
    'UniteWithCursorWord', 'UniteWithInput', 'UniteWithInputDirectory', 'UniteWithProjectDir']
hook_add = '''
    nnoremap <silent> <C-P> :<C-U>Unite file_mru<CR>
    nnoremap <silent> <C-N> :<C-U>UniteWithBufferDir file_rec<CR>
    augroup vimrc_unite
        autocmd!
        autocmd FileType unite imap <buffer> <C-O> <Plug>(unite_insert_leave)
        autocmd FileType unite nnoremap <buffer> <expr> s unite#do_action('split')
        autocmd FileType unite nnoremap <buffer> <expr> v unite#do_action('vsplit')
    augroup END
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = "g:Version_check(800) && has('python3')"
depends = 'neomru.vim'
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
hook_add = '''
    nnoremap <silent> <C-P> :<C-U>Denite file_mru<CR>
    nnoremap <silent> <C-N> :<C-U>DeniteBufferDir file/rec<CR>

    augroup vimrc_denite
        autocmd!
        autocmd FileType denite nnoremap <silent> <buffer> <expr> <CR> denite#do_map('do_action')
        autocmd FileType denite nnoremap <silent> <buffer> <expr> s denite#do_map('do_action', 'split')
        autocmd FileType denite nnoremap <silent> <buffer> <expr> v denite#do_map('do_action', 'vsplit')
        autocmd FileType denite nnoremap <silent> <buffer> <expr> t denite#do_map('do_action', 'tabopen')
        autocmd FileType denite nnoremap <silent> <buffer> <expr> i denite#do_map('open_filter_buffer')
        autocmd FileType denite nnoremap <silent> <buffer> <expr> <C-O> denite#do_map('quit')
        autocmd FileType denite-filter nmap <buffer> <C-O> <Plug>(denite_filter_update)
        autocmd FileType denite-filter imap <buffer> <C-O> <Plug>(denite_filter_update)
    augroup END

    command! -nargs=? -complete=file_in_path DeniteFind call s:denite_with_path('file/rec', <f-args>)
    command! -nargs=? -complete=file_in_path DeniteGrep call s:denite_with_path('grep', <f-args>)
    function! s:denite_with_path(source, ...) abort
        let l:command = 'Denite ' . a:source
        if a:0
            let l:path = fnamemodify(expand(a:1), ':p')
            if g:is_windows
                let l:path = substitute(l:path, '\\', '\\\\', 'g')
            endif
            let l:command .= ' -path=' . l:path
        endif
        execute l:command
endfunction
'''
hook_post_source = '''
    call denite#custom#option('_', {
    \   'smartcase' : v:true,
    \   'max_dynamic_update_candidates' : 100000
    \})
    call denite#custom#source('_', 'matchers', ['matcher_regexp'])

    if executable('rg')
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep', '--no-heading'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    elseif executable('ag')
        call denite#custom#var('grep', 'command', ['ag'])
        call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    endif
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "g:Version_check(800, 'v') && has('python3')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "g:Version_check(800, 'v') && has('python3')"

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "!g:Version_check(800) && g:Version_check(704, 885) && has('lua')"
on_i = 1
hook_add = '''
    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#sources#syntax#min_keyword_length = 2

    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    augroup vimrc_neocomplete
        autocmd!
        autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
    augroup END

    inoremap <expr> <CR>  pumvisible() ? '<C-Y><CR>' : '<CR>'
    inoremap <expr> <BS>  neocomplete#smart_close_popup() . '<BS>'
    inoremap <expr> <C-H> neocomplete#smart_close_popup() . '<C-H>'
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
if = 'g:Version_check(800)'
on_i = 1
hook_add = '''
    let g:asyncomplete_auto_popup = 1
    let g:asyncomplete_auto_completeopt = 1
    inoremap <expr> <CR> pumvisible() ? '<C-Y><CR>' : '<CR>'
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = 'neosnippet.vim'
if = 'g:Version_check(800)'
hook_add = '''
    augroup vimrc_asyncomplete_neosnippet
        autocmd!
        autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
        \   'name': 'neosnippet',
        \   'whitelist': ['*'],
        \   'completor': function('asyncomplete#sources#neosnippet#completor')
        \}))
    augroup END
'''

[[plugins]]
repo = 'Shougo/neosnippet'
if = 'g:Version_check(704)'
on_i = 1
hook_add = '''
    imap <C-K> <Plug>(neosnippet_expand_or_jump)
    smap <C-K> <Plug>(neosnippet_expand_or_jump)

    if has('conceal')
        set conceallevel=2
        set concealcursor=niv
    endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
if = 'g:Version_check(704)'
on_source = 'neosnippet'
hook_add = '''
    let g:neosnippet#snippets_directory = [
    \   g:plugins_dir . expand('/repos/github.com/Shougo/neosnippet-snippets/snippets/'),
    \   g:dotfiles_vim_dir . expand('/snippets')
    \]
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
if = "g:Version_check(800)"
depends = ['async.vim', 'asyncomplete-lsp.vim']
hook_add = '''
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1

    augroup vimrc_lsp_enable
        autocmd!
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        nmap <buffer> <Space>? <Plug>(lsp-hover)
        if g:is_my_layout
            nmap <buffer> + <Plug>(lsp-definition)
        else
            nmap <buffer> <C-]> <Plug>(lsp-definition)
        endif
    endfunction
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'
if = "g:Version_check(800)"

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
if = "g:Version_check(800)"

[[plugins]]
repo = 'mattn/vim-lsp-settings'
if = "g:Version_check(800)"
depends = 'vim-lsp'

[[plugins]]
repo = 'thinca/vim-quickrun'
if = 'g:Version_check(702)'
depends = 'vimproc.vim'
hook_add = '''
    let g:quickrun_no_default_key_mappings = 1

    execute 'nnoremap <silent> <expr> <Space>' . (g:is_my_layout ? 'y' : 'q')
                \ "':<C-U>QuickRun' . (exists('b:quickrun_args') ? (' -args ' . b:quickrun_args) : '') . '<CR>'"
    nnoremap <silent> <expr> <C-C> quickrun#is_running() ? quickrun#sweep_sessions() : '<C-C>'

    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    if has('win32unix')
        let s:root = system('cygpath -w /')
        let s:root = shellescape(s:root)
        let s:root = substitute(s:root, '\n', '', 'g')

        let s:javac_cmd = 'javac -J-Dfile.encoding=UTF-8 %o ' . s:root . '%s'
        let s:java_cmd  = '%c -Dfile.encoding=UTF-8 -cp ' . s:root . '%s:h %s:t:r %a'
        let g:quickrun_config.java = {
        \   'exec': [s:javac_cmd, s:java_cmd]
        \}
    endif

    let g:quickrun_config._ = {
    \   'runner' : 'vimproc',
    \   'runner/vimproc/updatetime' : 60
    \}

    if executable('clang')
        let g:quickrun_config.c = {
        \   'command' : 'clang'
        \}
    endif

    if executable('clang++')
        let g:quickrun_config.cpp = {
        \   'command' : 'clang++',
        \   'cmdopt'  : '--std=c++11'
        \}
    endif

    let g:quickrun_config.markdown = {
    \   'outputter' : 'browser'
    \}
'''
hook_source = '''
    if has('mac') && executable('mcs')
        let g:quickrun_config.cs = g:quickrun#default_config['cs/mcs']
    endif
'''

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
   let g:undotree_WindowLayout = 3
   let g:undotree_HelpLine = 0
'''

[[plugins]]
repo = 'mattn/vim-lexiv'

[[plugins]]
repo = 'oka-h/yozakura.vim'
hook_add = '''
    augroup vimrc_yozakura
        autocmd VimEnter * colorscheme yozakura
    augroup END
'''

[[plugins]]
repo = 'oka-h/stare-tab.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_source = '''
    let g:indentLine_fileTypeExclude = ['help', 'quickrun', 'tex', 'text', 'w3m']
    let g:indentLine_bufNameExclude  = ['term://.//*']
    let g:indentLine_color_term = 236
    let g:indentLine_char = '|'
'''

[[plugins]]
repo = 'kana/vim-submode'
if = 'g:Version_check(702)'
hook_source = '''
    call submode#enter_with('winsize', 'n', '', '<C-W>+', '<C-W>+')
    call submode#enter_with('winsize', 'n', '', '<C-W>-', '<C-W>-')
    call submode#enter_with('winsize', 'n', '', '<C-W>>', '<C-W>>')
    call submode#enter_with('winsize', 'n', '', '<C-W><', '<C-W><')
    call submode#map('winsize', 'n', '', '+', '<C-W>+')
    call submode#map('winsize', 'n', '', '-', '<C-W>-')
    call submode#map('winsize', 'n', '', '>', '<C-W>>')
    call submode#map('winsize', 'n', '', '<', '<C-W><')
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
if = 'g:Version_check(703, 867)'
on_cmd = 'AnzuUpdateSearchStatus'
on_map = '<Plug>(anzu-'
hook_add = '''
    if exists('##CmdlineLeave')
        augroup vimrc_echo_anzu_post_search
            autocmd!
            autocmd CmdlineLeave [/\?] call s:set_echo_anzu_flag()
        augroup END

        function! s:set_echo_anzu_flag() abort
            augroup vimrc_echo_anzu_flag
                autocmd!
                autocmd CursorMoved * if v:hlsearch
                                  \ |     AnzuUpdateSearchStatus
                                  \ |     echo anzu#search_status()
                                  \ | endif
                                  \ | autocmd! vimrc_echo_anzu_flag
            augroup END
        endfunction
    endif
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
if = '!g:Version_check(800, 1238)'
on_map = '<Plug>(incsearch-'
hook_add = '''
    let g:incsearch#auto_nohlsearch = 1

    nmap <expr> n (g:hlsearch ? '' : '<Plug>(incsearch-nohl)') . '<Plug>(anzu-n-with-echo)'
    nmap <expr> N (g:hlsearch ? '' : '<Plug>(incsearch-nohl)') . '<Plug>(anzu-N-with-echo)'
    XOmap <expr> n g:hlsearch ? (feedkeys('n', 'n') ? '' : '') : '<Plug>(incsearch-nohl-n)'
    XOmap <expr> N g:hlsearch ? (feedkeys('N', 'n') ? '' : '') : '<Plug>(incsearch-nohl-N)'

    if !has('gui_macvim')
        NXmap / <Plug>(incsearch-forward)
        NXmap ? <Plug>(incsearch-backward)
        NXnoremap <Space>/ /
        NXnoremap <Space>? ?
    endif

    if g:is_my_layout
        nmap ( <Plug>(incsearch-nohl)<Plug>(anzu-star-with-echo)
        nmap ) <Plug>(incsearch-nohl)<Plug>(anzu-sharp-with-echo)
    else
        nmap * <Plug>(incsearch-nohl)<Plug>(anzu-star-with-echo)
        nmap # <Plug>(incsearch-nohl)<Plug>(anzu-sharp-with-echo)
    endif

    let s:event = exists('##TerminalOpen') ? 'TerminalOpen'
              \ : exists('##TermOpen')     ? 'TermOpen'
                                         \ : ''
    augroup vimrc_remove_incsearch_vim_augroup
        autocmd!
        if s:event != ''
            execute 'autocmd' s:event '* augroup incsearch-auto-nohlsearch'
                                    \ '|     autocmd!'
                                    \ '| augroup END'
        endif
    augroup END
'''

[[plugins]]
repo = 'haya14busa/is.vim'
if = 'g:Version_check(800, 1238)'
hook_add = '''
    let g:is#do_default_mappings = 0

    nmap <expr> n (g:hlsearch ? '' : '<Plug>(is-nohl)') . '<Plug>(anzu-n-with-echo)'
    nmap <expr> N (g:hlsearch ? '' : '<Plug>(is-nohl)') . '<Plug>(anzu-N-with-echo)'
    XOmap <expr> n g:hlsearch ? (feedkeys('n', 'n') ? '' : '') : '<Plug>(is-n)'
    XOmap <expr> N g:hlsearch ? (feedkeys('N', 'n') ? '' : '') : '<Plug>(is-N)'

    if g:is_my_layout
        nmap ( <Plug>(is-nohl)<Plug>(anzu-star-with-echo)
        nmap ) <Plug>(is-nohl)<Plug>(anzu-sharp-with-echo)
    else
        nmap * <Plug>(is-nohl)<Plug>(anzu-star-with-echo)
        nmap # <Plug>(is-nohl)<Plug>(anzu-sharp-with-echo)
    endif

    let s:event = exists('##TerminalOpen') ? 'TerminalOpen'
              \ : exists('##TermOpen')     ? 'TermOpen'
                                         \ : ''
    augroup vimrc_remove_is_vim_augroup
        autocmd!
        if s:event != ''
            execute 'autocmd' s:event '* augroup plugin-is-auto-nohlsearch-internal'
                                    \ '|     autocmd!'
                                    \ '| augroup END'
        endif
    augroup END
'''

[[plugins]]
repo = 'thinca/vim-ambicmd'
if = 'g:Version_check(703)'
hook_add = '''
    cnoremap <expr> <Space> ambicmd#expand('<Space>')
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
if = "g:Version_check(703, 'v')"
hook_add = '''
    cnoremap <expr> / <SID>replace_vim_over('/')

    let s:is_vim_over_replaced = 0
    function! s:replace_vim_over(key) abort
        let s:is_vim_over_replaced = 1
        let l:substitute_expr = "^\\s\\?\\(%\\|'<,'>\\)\\?\\s\\?s\\%[ubstitute]\\s\\?$"
        let l:cmdline = getcmdline()
        if getcmdtype() ==# ':' && getcmdpos() == len(l:cmdline) + 1
                    \ && l:cmdline =~# l:substitute_expr
            return "\<C-U>OverCommandLine\<CR>" . l:cmdline . a:key
        else
            return a:key
        endif
    endfunction

    augroup vimrc_remove_vim_over_cmd
        autocmd!
        autocmd User OverCmdLineEnter if s:is_vim_over_replaced
                                  \ |     call histdel(':', 'OverCommandLine')
                                  \ |     let s:is_vim_over_replaced = 0
                                  \ | endif
    augroup END
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'
hook_add = '''
    nnoremap <silent> <Space>a :<C-U>set operatorfunc=<SID>alignta<CR>g@
    xnoremap <Space>a :Alignta<Space>

    function! s:alignta(type) abort
        call feedkeys("'[V']:Alignta ", 'n')
    endfunction
'''

[[plugins]]
repo = 'oka-h/re-window.vim'
if = 'g:Version_check(800)'
hook_add = '''
    NXmap <Space>w [rewindow]
    NXnoremap [rewindow] <Nop>

    for s:d in split('hjklHJKL', '\w\zs')
        execute 'NXmap [rewindow]' . s:d '<Plug>(rewindow-reopen-' . s:d . ')'
    endfor

    NXmap <C-W>o     <Plug>(rewindow-only)
    NXmap <C-W><C-O> <Plug>(rewindow-only)

    if g:is_my_layout
        NXmap <C-W>ay <Plug>(rewindow-tabclose)
    else
        NXmap <C-W>aq <Plug>(rewindow-tabclose)
    endif
'''

[[plugins]]
repo = 'koron/codic-vim'
on_cmd = 'Codic'

[[plugins]]
repo = 'thinca/vim-ref'
if = "(executable('w3m') || executable('lynx')) && g:Version_check(702)"
on_cmd = 'Ref'
hook_add = '''
    let g:ref_source_webdict_sites = {
    \   'alc' : {
    \       'url' : 'http://eow.alc.co.jp/search?q=%s'
    \    },
    \   'wiki' : {
    \       'url' : 'http://ja.wikipedia.org/w/index.php?search=%s'
    \   }
    \}

    let g:ref_source_webdict_sites.default = 'alc'

    function! g:ref_source_webdict_sites.alc.filter(output) abort
        return s:remove_wasted_lines(a:output, 24)
    endfunction

    function! g:ref_source_webdict_sites.wiki.filter(output) abort
        return s:remove_wasted_lines(a:output, 2)
    endfunction

    function! s:remove_wasted_lines(text, head_lines) abort
        let l:str = substitute(a:text, '\n\{3,}', '\n\n', 'g')
        let l:str =  join(split(l:str, "\n")[a:head_lines:], "\n")
        return l:str
    endfunction

    nnoremap <Space>r :<C-U>Ref webdict alc<Space>
    nnoremap <Space>r<Space> :<C-U>call histadd(':', 'Ref webdict alc ' . expand('<cword>'))<CR>:<UP><CR>
'''

[[plugins]]
repo = 'oka-h/load-indent.vim'

[[plugins]]
repo = 'thinca/vim-singleton'
if = "has('gui_running')"
hook_source = '''
    call singleton#enable()
'''


# ------------------------------------------------------------------------------
# Motion plugins
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
if = 'g:Version_check(704, 313)'
on_map = '<Plug>(edgemotion-'
hook_add = '''
    NXOmap <Space>j <Plug>(edgemotion-j)
    NXOmap <Space>k <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'fuenor/jpmoveword.vim'
hook_add = '''
    let g:jpmoveword_enable_WBE = 0
    let g:moveword_enable_wbe   = 0
    let g:jpmoveword_separator = '，．、。（）'
    nmap <silent> w <Plug>EolMove_w
    nmap <silent> e <Plug>EolMove_b
    nmap <silent> b <Plug>EolMove_e
    nmap <silent> W <Plug>JpMove_nW
    omap <silent> W <Plug>JpMove_oW
    xmap <silent> W <Plug>JpMove_xW
    nmap <silent> E <Plug>JpMove_nB
    omap <silent> E <Plug>JpMove_oB
    xmap <silent> E <Plug>JpMove_xB
    nmap <silent> B <Plug>JpMove_nE
    omap <silent> B <Plug>JpMove_oE
    xmap <silent> B <Plug>JpMove_xE
    omap <silent> iW <Plug>JpTextObjctIon
    xmap <silent> iW <Plug>JpTextObjctIxn
    omap <silent> aW <Plug>JpTextObjctAon
    xmap <silent> aW <Plug>JpTextObjctAxn
'''

[[plugins]]
repo = 'deton/jasentence.vim'
hook_add = '''
    let g:jasentence_endpat = '[。．？！]\+'
    let g:jasentence_no_default_key_mappings = 1
    omap <silent> as <Plug>JaSentenceTextObjA
    omap <silent> is <Plug>JaSentenceTextObjI
    xmap <silent> as <Plug>JaSentenceTextObjVA
    xmap <silent> is <Plug>JaSentenceTextObjVI
'''


# ------------------------------------------------------------------------------
# Edit plugins
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'
if = 'g:Version_check(700)'
hook_add = '''
    let g:surround_no_mappings = 1
    let g:surround_no_insert_mappings = 1
    nmap ds  <Plug>Dsurround
    nmap cs  <Plug>Csurround
    nmap cS  <Plug>CSurround
    nmap ms  <Plug>Ysurround
    nmap mS  <Plug>YSurround
    nmap mss <Plug>Yssurround
    nmap mSs <Plug>YSsurround
    nmap mSS <Plug>YSsurround
    xmap S   <Plug>VSurround
    xmap gS  <Plug>VgSurround
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
if = 'g:Version_check(702, 407)'
hook_add = '''
    let g:tcomment#mode_extra = 'B'
    let g:tcomment_maps = 0
    NXmap <Space>o <Plug>TComment_gc
    nmap <Space>oo <Plug>TComment_gcc
'''


# ------------------------------------------------------------------------------
# Text object plugins
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'kana/vim-textobj-user'
if = 'g:Version_check(704)'

[[plugins]]
repo = 'anyakichi/vim-textobj-subword'
if = 'g:Version_check(704)'
on_cmd = '<Plug>(textobj-subword-'
depends = 'vim-textobj-user'
hook_add = '''
    if g:is_my_layout
        NXOmap - <Plug>(textobj-subword-n)
        NXOmap _ <Plug>(textobj-subword-p)
        XOmap a- <Plug>(textobj-subword-a)
        XOmap a_ <Plug>(textobj-subword-a)
        XOmap i- <Plug>(textobj-subword-i)
        XOmap i_ <Plug>(textobj-subword-i)
    else
        NXOmap ] <Plug>(textobj-subword-n)
        NXOmap } <Plug>(textobj-subword-p)
        XOmap a] <Plug>(textobj-subword-a)
        XOmap a} <Plug>(textobj-subword-a)
        XOmap i] <Plug>(textobj-subword-i)
        XOmap i} <Plug>(textobj-subword-i)
    endif
'''

[[plugins]]
repo = 'kana/vim-textobj-function'
if = 'g:Version_check(704)'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-indent'
if = 'g:Version_check(704)'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'anyakichi/vim-textobj-xbrackets'
depends = 'vim-textobj-user'
if = 'g:Version_check(704)'
hook_add = '''
    let g:textobj_xbrackets_extra_iskeyword = '*.:'
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
if = 'g:Version_check(704)'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'bps/vim-textobj-python'
if = "g:Is_filetype_enabled('python') && g:Version_check(704)"
on_ft = 'python'
depends = 'vim-textobj-user'


# ------------------------------------------------------------------------------
# Filetype plugins
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'vim-scripts/Conque-GDB'
if = "g:Is_filetype_enabled('c') || g:Is_filetype_enabled('cpp')"
on_ft = ['c', 'cpp']
hook_add = '''
    augroup vimrc_conque_gdb
        autocmd!
        autocmd FileType c,cpp nmap <buffer> <Space>g [gdb]
        autocmd FileType c,cpp nnoremap <buffer> [gdb] <Nop>
        autocmd FileType c,cpp nnoremap <buffer> [gdb]j :<C-U>ConqueGdbSplit<Space>
        autocmd FileType c,cpp nnoremap <buffer> [gdb]l :<C-U>ConqueGdbVSplit<Space>
        autocmd FileType c,cpp nnoremap <buffer> [gdb]; :<C-U>ConqueGdbCommand<Space>
        autocmd FileType c,cpp nnoremap <buffer> <silent> [gdb]q :<C-U>ConqueGdbCommand quit<CR>
    augroup END

    let g:ConqueGdb_Leader = '[gdb]'
    let g:ConqueGdb_SaveHistory = 1
    let g:ConqueTerm_FastMode = 1
    let g:ConqueTerm_ReadUnfocused = 1
    let g:ConqueTerm_CloseOnEnd = 1
    if has('python3')
        let g:ConqueTerm_PyVersion = 3
    endif
'''

[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
if = "g:Is_filetype_enabled('cs')"
on_ft = ['cs', 'csi', 'csx']
hook_post_update = '''
    let s:cmd = g:is_windows ? 'msbuild' : 'xbuild'
    let g:dein#plugin.build = s:cmd . ' server/OmniSharp.sln'
'''
hook_add = '''
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\);]'

    augroup vimrc_omnisharp
        autocmd!
        if g:is_my_layout
            autocmd FileType cs,csi,csx nmap <buffer> + <Plug>(omnisharp_go_to_definition)
        else
            autocmd FileType cs,csi,csx nmap <buffer> <C-]> <Plug>(omnisharp_go_to_definition)
        endif
    augroup END
'''

[[plugins]]
repo = 'mattn/emmet-vim'
if = "g:Is_filetype_enabled('html')"
on_ft = ['html', 'css']
hook_add = '''
    let g:user_emmet_leader_key = '<C-J>'
'''

[[plugins]]
repo = 'sophacles/vim-processing'
if = "g:Is_filetype_enabled('processing') && executable('processing-java')"
on_ft = 'processing'
hook_add = '''
    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    let g:quickrun_config.processing = {
    \   'command' : 'processing-java',
    \   'exec'    : '%c --sketch=%s:h --output=%s:h/output --force --run'
    \}
'''

[[plugins]]
repo = 'PProvost/vim-ps1'
if = "g:is_windows || g:Is_filetype_enabled('ps1')"
on_ft = 'ps1'
