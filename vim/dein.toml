# ------------------------------------------------------------------------------
# dotfiles/vim/dein.toml
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_post_update = '''
    let s:doc_dir = g:plugins_dir . expand('/repos/github.com/vim-jp/vimdoc-ja/doc')
    execute 'helptags ' . s:doc_dir
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
if = "!(has('python3') && (v:version >= 800 || has('nvim')))"
depends = 'neomru.vim'
hook_add = '''
    nnoremap <silent> <Space>n :<C-U>Unite file_rec<CR>
    nnoremap <silent> <C-P>    :<C-U>Unite file_mru<CR>
    nnoremap <silent> <C-N>    :<C-U>UniteWithBufferDir file_rec<CR>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('python3') && (v:version >= 800 || has('nvim'))"
depends = 'neomru.vim'
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
hook_add = '''
    nnoremap <silent> <Space>n :<C-U>Denite file_rec -mode=normal<CR>
    nnoremap <silent> <C-P>    :<C-U>Denite file_mru -mode=normal<CR>
    nnoremap <silent> <C-N>    :<C-U>DeniteBufferDir file_rec -mode=normal<CR>
'''
hook_post_source = '''
    call denite#custom#source('file_rec', 'matchers', ['matcher_regexp'])
    call denite#custom#source('file_mru', 'matchers', ['matcher_regexp'])
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "!(has('nvim') && has('python3')) && (v:version + has('patch885') >= 704 || has('nvim')) && has('lua')"
on_i = 1
hook_add = '''
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0

    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1

    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1

    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
    \   'default'  : '',
    \   'vimshell' : $HOME.'/.vimshell_hist',
    \   'scheme'   : $HOME.'/.gosh_completions'
    \}

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr> <C-G> neocomplete#undo_completion()
    inoremap <expr> <C-L> neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-R>=<SID>my_cr_function()<CR>

    function! s:my_cr_function()
      return (pumvisible() ? "\<C-Y>" : "" ) . "\<CR>"
      " For no inserting <CR> key.
      " return pumvisible() ? "\<C-Y>" : "\<CR>"
    endfunction

    " <TAB>: completion.
    inoremap <expr> <TAB> pumvisible() ? "\<C-N>" : "\<TAB>"

    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr> <C-H> neocomplete#smart_close_popup()."\<C-H>"
    inoremap <expr> <BS>  neocomplete#smart_close_popup()."\<C-H>"

    " Close popup by <Space>.
    " inoremap <expr> <Space> pumvisible() ? "\<C-Y>" : "\<Space>"

    " AutoComplPop like behavior.
    " let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    " set completeopt+=longest
    " let g:neocomplete#enable_auto_select = 1
    " let g:neocomplete#disable_auto_complete = 1
    " inoremap <expr> <TAB> pumvisible() ? "\<Down>" : "\<C-X>\<C-U>"

    " Enable omni completion.
    augroup neocomplete
        autocmd!
        autocmd FileType css    setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown
                              \ setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript
                              \ setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml    setlocal omnifunc=xmlcomplete#CompleteTags
    augroup END

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    " let g:neocomplete#sources#omni#input_patterns.php
    "                                \ = '[^. \t]->\h\w*\|\h\w*::'
    " let g:neocomplete#sources#omni#input_patterns.c
    "                                \ = '[^.[:digit:] *\t]\%(\.\|->\)'
    " let g:neocomplete#sources#omni#input_patterns.cpp
    "                                \ = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    " Don't display preview window.
    set completeopt-=preview
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim') && has('python3')"
on_i = 1
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_refresh_always = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet'
if = "v:version >= 704 || has('nvim')"
on_i = 1
hook_add = '''
    " Plugin key-mappings.
    " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)

    " For conceal markers.
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
if = "v:version >= 704 || has('nvim')"
on_source = 'neosnippet'
hook_add = '''
    let g:neosnippet#snippets_directory = g:plugins_dir . expand('/repos/github.com/Shougo/neosnippet-snippets/snippets/')
'''

[[plugins]]
repo = 'ujihisa/neco-look'
if = "executable('look')"

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vimproc.vim'
hook_add = '''
    let g:quickrun_no_default_key_mappings = 1

    nnoremap <silent> <expr> <Space>q ':<C-U>QuickRun' . (exists('b:quickrun_args') ? (' -args ' . b:quickrun_args) : '') . '<CR>'

    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    if has('win32unix')
        let s:root = system('cygpath -w /')
        let s:root = shellescape(s:root)
        let s:root = substitute(s:root, '\n', '', 'g')

        let s:javac_cmd = 'javac -J-Dfile.encoding=UTF-8 %o ' . s:root . '%s'
        let s:java_cmd  = '%c -Dfile.encoding=UTF-8 -cp ' . s:root . '%s:h %s:t:r %a'
        let g:quickrun_config.java = {
        \   'exec': [s:javac_cmd, s:java_cmd]
        \}
    endif

    let g:quickrun_config._ = {
    \   'runner' : 'vimproc',
    \   'runner/vimproc/updatetime' : 60
    \}

    let g:quickrun_config.markdown = {
    \   'outputter' : 'browser'
    \}
'''
 
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
depends = 'vim-quickrun'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = ['vimproc.vim', 'vim-quickrun', 'shabadou']
hook_add = '''
    " Check syntax after save the file.
    let g:watchdogs_check_BufWritePost_enable = 1

    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    let g:quickrun_config['watchdogs_checker/_'] = {
    \   'hook/close_quickfix/enable_exit': 1
    \}

    let g:quickrun_config['java/watchdogs_checker'] = {
    \   'type': 'watchdogs_checker/javac'
    \}

    let g:quickrun_config['watchdogs_checker/javac'] = {
    \   'command': 'javac',
    \   'exec': '%c %o %S',
    \   'errorformat': '%A%f:%l: %m,%-Z%p^,%+C%.%#,%-G%.%#'
    \}

    let g:quickrun_config['watchdogs_checker/pyflakes3'] = {
    \   'command': executable('pyflakes3') ? 'pyflakes3' :
    \              executable('python3')   ? 'python3'   :
    \              executable('pyflakes')  ? 'pyflakes'  :
    \                                        'python'    ,
    \   'cmdopt': executable('pyflakes3') ? ''            :
    \             executable('python3')   ? '-m pyflakes' :
    \             executable('pyflakes')  ? ''            :
    \                                       '-m pyflakes' ,
    \   'exec': '%c %o %s:p',
    \   'errorformat': '%f:%l:%m'
    \}
'''
 
[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = '0x841/yozakura.vim'
hook_source = '''
    colorscheme yozakura
'''

[[plugins]]
repo = '0x841/stare-tab.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_source = '''
    let g:indentLine_fileTypeExclude = ['help', 'quickrun', 'tex', 'text', 'w3m']
    let g:indentLine_color_term = 236
    let g:indentLine_char = '|'
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<Plug>(incsearch-']
hook_add = '''
    let g:incsearch#auto_nohlsearch = 1
    map / <Plug>(incsearch-forward)
    map ? <Plug>(incsearch-backward)
    map * <Plug>(incsearch-nohl-*)
    map # <Plug>(incsearch-nohl-#)
    map n <Plug>(incsearch-nohl-n)
    map N <Plug>(incsearch-nohl-N)
    noremap <Space>/ /
    noremap <Space>? ?
    noremap <Space>* *
    noremap <Space># #
'''

[[plugins]]
repo = '0x841/re-window.vim'
hook_add = '''
    nmap <Space>w [rewindow]
    nnoremap <silent> [rewindow]w     :<C-U>call rewindow#reopen_window(1)<CR>
    nnoremap <silent> [rewindow]j     :<C-U>call rewindow#reopen_window(3)<CR>
    nnoremap <silent> [rewindow]k     :<C-U>call rewindow#reopen_window(2)<CR>
    nnoremap <silent> [rewindow]h     :<C-U>call rewindow#reopen_window(4)<CR>
    nnoremap <silent> [rewindow]l     :<C-U>call rewindow#reopen_window(5)<CR>
    nnoremap <silent> [rewindow]J     :<C-U>call rewindow#reopen_window(7)<CR>
    nnoremap <silent> [rewindow]K     :<C-U>call rewindow#reopen_window(6)<CR>
    nnoremap <silent> [rewindow]H     :<C-U>call rewindow#reopen_window(8)<CR>
    nnoremap <silent> [rewindow]L     :<C-U>call rewindow#reopen_window(9)<CR>
    nnoremap <silent> <C-W>o          :<C-U>call rewindow#only()<CR>
    nnoremap <silent> <C-W><C-O>      :<C-U>call rewindow#only()<CR>
    nnoremap <silent> <C-W>aq         :<C-U>call rewindow#tabclose()<CR>
    nnoremap <silent> <C-W><C-A>q     :<C-U>call rewindow#tabclose()<CR>
    nnoremap <silent> <C-W><C-A><C-Q> :<C-U>call rewindow#tabclose()<CR>
'''

[[plugins]]
repo = 'fuenor/jpmoveword.vim'
hook_add = '''
    let g:jpmoveword_enable_WBE = 1
    let g:jpmoveword_separator = '，．、。（）'
'''

[[plugins]]
repo = 'deton/jasentence.vim'
hook_add = '''
    let g:jasentence_endpat = substitute(g:jasentence_endpat, '、', '', '')
    let g:jasentence_endpat = substitute(g:jasentence_endpat, '，', '', '')
'''

[[plugins]]
repo = 'koron/codic-vim'
on_cmd = 'Codic'

[[plugins]]
repo = 'thinca/vim-ref'
if = "executable('w3m') || executable('lynx')"
on_cmd = 'Ref'
hook_add = '''
    let g:ref_source_webdict_sites = {
    \   'alc' : {
    \       'url' : 'http://eow.alc.co.jp/search?q=%s'
    \    },
    \   'wiki' : {
    \       'url' : 'http://ja.wikipedia.org/w/index.php?search=%s'
    \   }
    \}

    let g:ref_source_webdict_sites.default = 'alc'

    function! g:ref_source_webdict_sites.alc.filter(output)
        return s:remove_wasted_lines(a:output, 24)
    endfunction

    function! g:ref_source_webdict_sites.wiki.filter(output)
        return s:remove_wasted_lines(a:output, 2)
    endfunction

    function! s:remove_wasted_lines(text, head_lines)
        let l:str = substitute(a:text, '\n\{3,}', '\n\n', 'g')
        let l:str =  join(split(l:str, "\n")[a:head_lines:], "\n")
        return l:str
    endfunction

    nnoremap <Space>r :<C-U>Ref webdict alc<Space>
    nnoremap <Space>r<Space> :<C-U>Ref webdict alc <C-R><C-W><CR>
'''

[[plugins]]
repo = 'thinca/vim-singleton'
if = "has('gui_running')"
hook_source = '''
    call singleton#enable()
'''

[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
if = "g:is_filetype_enable_of.java && (v:version >= 704 || has('nvim')) && has('python') && !has('win32unix')"
on_ft = 'java'
hook_add = '''
    augroup javacomplete2
        autocmd!
        autocmd FileType java setlocal omnifunc=javacomplete#Complete
    augroup END
'''

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
if = "g:is_filetype_enable_of.markdown"
on_ft = 'markdown'
hook_post_source = '''
    augroup Previm
        autocmd!
        autocmd FileType *{mkd,markdown,rst,textile}* delcommand PrevimOpen
          \ | command! -buffer -nargs=0 PrevimOpen
          \   call openbrowser#open(fnamemodify('~/.vim/bundles/repos/github.com/kannokanno/previm/preview/index.html', ':p'))
    augroup END
'''

[[plugins]]
repo = 'sophacles/vim-processing'
if = "g:is_filetype_enable_of.processing && executable('processing-java')"
on_ft = 'processing'
hook_add = '''
    if !exists('g:quickrun_config')
        let g:quickrun_config = {}
    endif

    let g:quickrun_config.processing = {
    \   'command' : 'processing-java',
    \   'exec'    : '%c --sketch=%s:h --output=%s:h/output --force --run'
    \}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
if = "g:is_filetype_enable_of.python && has('nvim') && has('python3')"
depends = 'deoplete.nvim'
on_ft = 'python'
on_i = 1

